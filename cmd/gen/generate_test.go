package main

import (
	"bytes"
	"context"
	"io"
	"reflect"
	"testing"
)

func Test_generate(t *testing.T) {
	type args struct {
		ctx context.Context
		pkg Package
	}
	tests := []struct {
		name    string
		args    args
		want    io.Writer
		wantErr bool
	}{
		{
			name: "",
			args: args{
				ctx: context.Background(),
				pkg: Package{
					Name: "predict",
					Structs: []Struct{
						{
							Name:       "predictorBreaker",
							TypeParams: nil,
							Interface: Interface{
								Name: "serving.Predictor",
								Methods: []Method{
									{
										Name: "Predict",
										Params: []Param{
											{Name: "ctx", Type: "context.Context"},
											{Name: "req", Type: "*serving.PredictRequest"},
										},
										Results: []Param{
											{Name: "resp", Type: "*serving.PredictResponse"},
											{Name: "err", Type: "error"},
										},
									},
								},
							},
						},
					},
				},
			},
			want: bytes.NewBufferString(`// Code generated by "gen"; DO NOT EDIT.

package predict

import (
	"context"

	"github.com/chenyanchen/breaker"
)

type predictorBreaker struct {
	source  serving.Predictor
	breaker breaker.Breaker
}

func NewpredictorBreaker(source serving.Predictor) *predictorBreaker {
	return &predictorBreaker{
		source:  source,
		breaker: breaker.NewGoogleBreaker(),
	}
}

func (b *predictorBreaker) Predict(ctx context.Context, req *serving.PredictRequest) (*serving.PredictResponse, error) {
	var (
		resp *serving.PredictResponse
		err  error
	)
	err = b.breaker.Do(func() error {
		resp, err = b.source.Predict(ctx, req)
		return err
	})
	return resp, err
}
`),
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := generate(tt.args.ctx, tt.args.pkg)
			if (err != nil) != tt.wantErr {
				t.Errorf("generate() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("generate() got = %v, want %v", got, tt.want)
			}
		})
	}
}
