// Code generated by "breaker-cli"; DO NOT EDIT.

{{$PackageName := .Name -}}
package {{$PackageName}}

{{range .Structs -}}
    {{$StructName := .Name -}}
    {{$InterfaceName := .Implemented.Name -}}
type {{$StructName}} struct {
	source  {{$PackageName}}.{{$InterfaceName}}
	breaker breaker.Breaker
}

func New{{$StructName}}(source {{$PackageName}}.{{$InterfaceName}}) *{{$StructName}} {
	return &{{$StructName}}{
		source:  source,
		breaker: breaker.NewGoogleBreaker(),
	}
}

{{range .Implemented.Methods -}}
    {{$ErrorReturn := "nil" -}}
func (b *{{$StructName}}) {{.Name}}({{range $i, $p := .Params}}{{.Name}} {{.Type}}, {{end}}) ({{range .Results}}{{.Type}}, {{end}}) {
	var (
		{{- range .Results}}
		{{.Name}} {{.Type}}
		{{- end}}
	)
	_ = b.breaker.Do(func() error {
		{{range $i, $r := .Results -}}
            {{- if $i -}}, {{end}}
            {{- if eq .Type "error" -}}
                {{$ErrorReturn = .Name}}
                {{- .Name -}}
            {{ else }}
                {{- .Name -}}
            {{ end }}
        {{- end}} = b.source.{{.Name}}(
	{{- range .Params -}}
		{{- if eq .Ellipsis true -}}
			{{- .Name -}}...
		{{- else -}}
			{{- .Name -}},
		{{- end -}}
	{{- end -}})
		return {{$ErrorReturn}}
	})
	return {{range $i, $r := .Results}}{{if $i}}, {{end}}{{.Name}}{{end}}
}

{{end -}}
{{- end}}
